import { useEffect, useRef, useState } from 'react'
import { observer } from 'mobx-react'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import dataStore from '../stores/dataStore'

const Home: NextPage = observer(() => {
  const socket = useRef<WebSocket>()
  const [product, setProduct] = useState('xbt');
  const connect = (market: any = 'xbt') => {
  const xbt = "PI_XBTUSD"
  const eth = "PI_ETHUSD"
  let feed: string
  if (market === 'xbt'){
    feed = xbt
  } else {
    feed = eth
  }
    if (typeof window !== 'undefined') {
      socket.current = new WebSocket("wss://www.cryptofacilities.com/ws/v1")
      socket.current.onopen = function() {
        socket.current?.send(`{"event":"subscribe","feed":"book_ui_1","product_ids":["${feed}"]}`);
      };
      socket.current.onmessage = function(event) {
        if(event.data) {
          const data = JSON.parse(event.data)
          if (data.feed === 'book_ui_1') {
            dataStore.amendData(data)
          }
          if (data.feed === 'book_ui_1_snapshot') {
            dataStore.setData(data)
          }
        }
      };
      socket.current.onerror = function(error) {
        console.log('error')
      };
    }
  }
  const toggleFeed = () => {
    if (typeof window !== 'undefined' && socket.current) {
      if(socket.current.readyState === 1) {
        socket.current.close()
      }
      else {
        connect()
      }
    }
  }

  const toggleProduct = () => {
    if (typeof window !== 'undefined' && socket.current) {
      if(socket.current.readyState === 1) {
        socket.current.close()
        if(product === 'xbt') {
          setProduct('eth')
        } else {
          setProduct('xbt')
        }
        connect(product)
      }
      else {
        connect()
      }
    }
  }

  const handleVisibilityChange = () => {
    if (document.visibilityState === "hidden" && socket.current) {
      socket.current.close()
    } else  {
    }
  }

  useEffect(() => {
    connect()
    document.addEventListener("visibilitychange", handleVisibilityChange, false);
  },[])


  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1 className={styles.title}>
        </h1>

        <div className={styles.grid}>
          <button onClick={toggleFeed}>
          Refresh the feed
          </button>
          Spread: {dataStore.spread}
        </div>
        {dataStore?.asks[0] && dataStore?.bids[0] &&  (
        <div className={styles.tableWrapper}>
        <table>
          <tbody>
            <tr>
              <th>Total</th>
              <th>Size</th>
              <th>Price</th>
            </tr>
            {dataStore.bids.map((bid, index)=>
              <tr key={index}>
                <td>{bid[2]}</td>
                <td>{bid[1]}</td>
                <td className={styles.bidPrice}>{bid[0]}</td>
              </tr>
            )}
          </tbody>
        </table>
        <table>
          <tbody>
            <tr>
              <th>Price</th>
              <th>Size</th>
              <th>Total</th>
            </tr>
            {dataStore.asks.map((ask, index)=>
              <tr key={index}>
                <td className={styles.askPrice}>{ask[0]}</td>
                <td>{ask[1]}</td>
                <td>{ask[2]}</td>
              </tr>
            )}
          </tbody>
        </table>
        </div>
        )}
        <div>
        </div>
        <button onClick={toggleProduct}>
          Toggle Feed
          </button>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
})

export default Home
